#Situar el directorio de trabajo de R en la carpeta con los archivos wav

#Librerias necesarias para el analisis de los archivos wav
library(seewave) 
library(tuneR)
library(stringr)
library(phonTools)
#Librerias necesarias para la función classifier()
library(class)
library(neuralnet)
library(nnet)
library("MASS")
library(penalizedLDA)
library(mda)
library(e1071)
library(naivebayes)
library(randomForest)
library(tree)
library(C50)
library(ipred)

#Escoge la ruta para el txt con los tiempos de divición de las vocales y el archivo con la función classifier()

timesFile <- file.choose()

classifierRoute <- file.choose()

#Carga la función classifier
source(classifierRoute)

#Guarda el contenido del documento que contiene los tiempos de divición de las vocales
vowelTimes <- read.table(timesFile, header = FALSE, sep = "")

#--------------------------------------------------------------------------------------------------------------
#Crea la tabla Formants que contiene las formantes de todos los archivos wav de la carpeta

#Tabla de formantes
Formants<-c(0,0,0,0)

#Vector de vocales
Vowels<-numeric()

#N de objetos dentro de la matriz vowelTimes
N<-nrow(vowelTimes)

#Lee todos los archivos wav y obtiene sus formantes
for(i in 1:N)
{
	#a <- substr(vowelTimes[i,1], 1, 1)
	#if(a != "w")
	#{
	#	next
	#}
	Vowels<-c(Vowels, substr(vowelTimes[i,1], 4, 5))
	formantName<-paste(vowelTimes[i,1], ".wav", sep="")
	wave<-readWave(formantName)
	ini<-vowelTimes[i,2] * wave@samp.rate / 1000
	fin<-vowelTimes[i,3] * wave@samp.rate / 1000
	center<-vowelTimes[i,4] * wave@samp.rate / 1000
	range<-min(c(center - ini, fin - center))
	ini<-center - range
	fin<-center + range  
	wave<-wave[ini:fin]
	coef = 4
	while(TRUE)
	{
		vowelForm<-findformants(wave@left, wave@samp.rate, verify = FALSE, coeffs = coef)

		#Continúa el ciclo hasta que la función devuelve por lo menos 4 formantes se puede incrementar o reducir para tratar de obtener mejores resultados en las predicciones
		#En caso de modificar el valor también se debe modificar el vector Formants<-c(0,0,0,0) con el numero de 0's correspondientes
		if(length(vowelForm$formant) >= 4)
		{
			Formants<-rbind(Formants, vowelForm$formant[1:4])
			break
   		} 
   		else 
   		{
			coef <- coef + 1;
   		}
	}
	print(c(i,nrow(Formants)))
}
Formants<-Formants[-1,]

#----------------------------------------------------------------------------------------------------------------
#Se crea la proporción de los dataset de entrenamiento y prueba

#La proporción se puede cambiar
proporcion = .70

Ntraining <- proporcion * nrow(Formants)
Ntraining <- round(Ntraining)

#---------------------------------------------------------------------------------------------------------------
#Función de clasificación y calculo de precisión

#Vector de metodos a evaluar
methods <- c("SVM", "GNB", "RF", "DT", "C50", "BAT", "LDA", "QDA", "FDA", "MDA", "PDA", "KNN")
#Matriz de metricas
metrics <- c(0,0)
#Matriz de metricas resultante
macum <- matrix(rep(0, 2*length(methods)), ncol = 2)

#Repetición de predicciónes y entrenemiento

iterations <- 100
for(i in 1:iterations)
{
	#Indices de la muestra
	trainIndex <- sample(1:nrow(Formants), Ntraining)

	#Muestras
	training <- Formants[trainIndex, ]
	test <- Formants[-trainIndex, ]

	#Resultados correspondientes del training
	Vtrue <- Vowels[trainIndex]

	#Variables necesarias para la función classifier()
	trainingFrame <- data.frame(f0 = training[,1], f1 = training[,2], f2 = training[,3], f3 = training[,4])
	tClass <- factor(Vtrue)
	testFrame <- data.frame(f0 = test[,1], f1 = test[,2], f2 = test[,3], f3 = test[,4])
	testTarget <- Vowels[-trainIndex]

	#Ciclo de metodos
	for(method in methods)
	{
		#Matriz de confución
		confusionMatrix <- classifier(method, tClass, trainingFrame, testFrame, testTarget)
		#matriz de apoyo
		confusionPrime <- rep(0, nrow(confusionMatrix))
		#Rellena las columnas o filas para formar una matriz cuadrada en caso de ser necesario
		for(j in 1:nrow(confusionMatrix))
		{
			if(rownames(confusionMatrix)[j]%in%colnames(confusionMatrix))
			{
				confusionPrime <- cbind(confusionPrime, confusionMatrix[,rownames(confusionMatrix)[j]])
			}
			else
			{
				confusionPrime <- cbind(confusionPrime, rep(0,nrow(confusionMatrix)))
			}
		}
		#Se devuelve la matriz cuadrada a confusionMatrix
		confusionPrime<-confusionPrime[, -1]
		colnames(confusionPrime) <- rownames(confusionPrime)
		confusionMatrix <- confusionPrime

		#Debug
		#print(method)
		#print(confusionMatrix)
		
		#Calculo de metricas y almacenamiento en su matriz para todos los metodos
		metric1 <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
		metric2 <- mean(diag(confusionMatrix)/rowSums(confusionMatrix))
		metrics<-rbind(metrics, c(metric1, metric2))
	}
	#Se guarda el resultado en la matriz de metricas acumuladas
	metrics <- metrics[-1,]
	rownames(metrics) <- methods
	colnames(metrics) <- c("metric1", "metric2")
	macum <- macum + metrics
	metrics <- c(0,0)

	#Numero de iteración
	print(i)
}

#Calculo de precicion acumulada de todas las iteraciones
macum <- macum/iterations
macum






Todos
    metric1   metric2
SVM 0.59804 0.6013467
GNB 0.43400 0.4366310
RF  0.62122 0.6223475
DT  0.44120 0.4458397
C50 0.55984 0.5611662
BAT 0.60482 0.6057704
LDA 0.32532 0.3333398
QDA 0.47530 0.4777255
FDA 0.32544 0.3334062
MDA 0.53554 0.5384420
PDA 0.28220 0.2905143
KNN 0.48132 0.4835095

Solo hombres
      metric1   metric2
SVM 0.4754321 0.4954422
GNB 0.4316049 0.4358826
RF  0.6275926 0.6321881
DT  0.5762963 0.5888533
C50 0.5826543 0.5891128
BAT 0.6168519 0.6205398
LDA 0.2201852 0.2302714
QDA 0.4611111 0.4664741
FDA 0.2211728 0.2310212
MDA 0.4175926 0.4277296
PDA 0.2240741 0.2394968
KNN 0.3509877 0.3580434

Solo mujeres
      metric1   metric2
SVM 0.6609249 0.6698857
GNB 0.5709249 0.5752475
RF  0.6956647 0.6992872
DT  0.5793642 0.5907699
C50 0.6282081 0.6324421
BAT 0.6742775 0.6766944
LDA 0.5020809 0.5124946
QDA 0.6240462 0.6282660
FDA 0.5024855 0.5125849
MDA 0.6691908 0.6735278
PDA 0.4654913 0.4774981
KNN 0.5509249 0.5567615

Solo mujeres 3 formantes
      metric1   metric2
SVM 0.6810983 0.6900660
GNB 0.5774566 0.5864918
RF  0.6776301 0.6825597
DT  0.5764162 0.5869512
C50 0.6245087 0.6301737
BAT 0.6587861 0.6629753
LDA 0.5226590 0.5354337
QDA 0.6352601 0.6424156
FDA 0.5231214 0.5356812
MDA 0.6888439 0.6946816
PDA 0.4914451 0.5069526
KNN 0.6109827 0.6168859

Solo mujeres 2 formantes
      metric1   metric2
SVM 0.6847977 0.6922039
GNB 0.5984971 0.6046123
RF  0.6416763 0.6456163
DT  0.5710983 0.5817662
C50 0.6115607 0.6172590
BAT 0.6261272 0.6299207
LDA 0.5083815 0.5225086
QDA 0.6093642 0.6167110
FDA 0.5094220 0.5231802
MDA 0.6832948 0.6887271
PDA 0.4882081 0.4987130
KNN 0.6571098 0.6625965

Solo mujeres con centro 1
      metric1   metric2
SVM 0.6162428 0.6285184
GNB 0.5734682 0.5791961
RF  0.6809827 0.6854179
DT  0.5727746 0.5757224
C50 0.6135260 0.6174560
BAT 0.6644509 0.6674171
LDA 0.4667630 0.4791144
QDA 0.5900578 0.5961859
FDA 0.4674566 0.4794041
MDA 0.6289017 0.6353959
PDA 0.4704046 0.4820983
KNN 0.4882659 0.4933727

Solo mujeres 80/20
      metric1   metric2
SVM 0.6960870 0.7055045
GNB 0.6050435 0.6157439
RF  0.6446957 0.6499188
DT  0.5765217 0.5923162
C50 0.6131304 0.6211248
BAT 0.6300000 0.6346508
LDA 0.5088696 0.5294549
QDA 0.6106087 0.6215365
FDA 0.5096522 0.5297294
MDA 0.6966087 0.7036582
PDA 0.4910435 0.5064052
KNN 0.6694783 0.6749696

Solo mujeres 90/10
      metric1   metric2
SVM 0.6892074 0.6891719
GNB 0.6041805 0.6081747
RF  0.6357727 0.6361324
DT  0.5677672 0.5904890
C50 0.6179811 0.6195986
BAT 0.6150081 0.6161572
LDA 0.5130367 0.5240070
QDA 0.6086508 0.6121673
FDA 0.5137263 0.5244766
MDA 0.6841285 0.6880439
PDA 0.4773855 0.4815734
KNN 0.6661031 0.6686833

Niños (865)
      metric1   metric2
SVM 0.4988031 0.5088934
GNB 0.3967568 0.4007720
RF  0.5777992 0.5816712
DT  0.4381081 0.4469816
C50 0.5161776 0.5195588
BAT 0.5562162 0.5604243
LDA 0.2162548 0.2248330
QDA 0.4201931 0.4238717
FDA 0.2162162 0.2245724
MDA 0.4492664 0.4558894
PDA 0.2076448 0.2187316
KNN 0.3651351 0.3688064

Solo niños
      metric1   metric2
SVM 0.5584536 0.5778483
GNB 0.5193814 0.5308595
RF  0.6231959 0.6307504
DT  0.5984536 0.6077307
C50 0.5820619 0.5929462
BAT 0.6134021 0.6207216
LDA 0.4667010 0.4855990
QDA 0.5262887 0.5359279
FDA 0.4686598 0.4867756
MDA 0.6087629 0.6167174
PDA 0.4146392 0.4350246
KNN 0.4067010 0.4208784

Solo niñas
      metric1   metric2
SVM 0.5064706 0.5452702
GNB 0.5941176 0.6048357
RF  0.6351471 0.6496607
DT  0.5751471 0.5905816
C50 0.5872059 0.6052288
BAT 0.6351471 0.6461973
LDA 0.5419118 0.5670105
QDA 0.5657353 0.5799627
FDA 0.5447059 0.5685291
MDA 0.5616176 0.5806404
PDA 0.5432353 0.5664960
KNN 0.4416176 0.4629085


#-------------------------------------------------------------------------------------------------------
#Referencia para el calculo de Metric1 y Metric2
#https://towardsdatascience.com/comprehensive-guide-on-multiclass-classification-metrics-af94cfb83fbd